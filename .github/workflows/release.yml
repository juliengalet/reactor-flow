name: Release

on:
  workflow_dispatch:

concurrency: release

env:
  STANDARD_VERSION: 9.3.2

jobs:
  dry-run-release:
    name: Dry run release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: develop
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name ${{ secrets.CI_GITHUB_USER }}
          git config user.email ${{ secrets.CI_GITHUB_EMAIL }}

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
          cache: 'maven'

      - name: Dry run release
        env:
          MAVEN_ARGS: --batch-mode --errors --fail-at-end --show-version
          USERNAME: ${{github.actor}}
          PASSWORD: ${{github.token}}
        run: |
          mvn $MAVEN_ARGS clean release:clean release:prepare -DpushChanges=false -DautoVersionSubmodules=true -Darguments="-Dmaven.test.skip=true"

  merge-develop-into-master:
    name: Merge develop into master
    runs-on: ubuntu-latest
    needs:
      - dry-run-release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: develop
          # Use a personal access token in order to be able to perform action on protected branches
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name ${{ secrets.CI_GITHUB_USER }}
          git config user.email ${{ secrets.CI_GITHUB_EMAIL }}

      - name: Merge into master
        run: |
          git fetch origin
          git checkout master && git pull origin master
          git merge --ff-only develop
          git push origin master

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - merge-develop-into-master
    outputs:
      releaseVersion: ${{ steps.release.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0
          # Use a personal access token in order to be able to trigger workflow for release tag
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
          cache: 'maven'

      - name: Download standard-version
        run: npm install -g standard-version@${{ env.STANDARD_VERSION }}

      - name: Setup git
        run: |
          git config user.name ${{ secrets.CI_GITHUB_USER }}
          git config user.email ${{ secrets.CI_GITHUB_EMAIL }}

      - name: Release
        id: release
        env:
          MAVEN_ARGS: --batch-mode --errors --fail-at-end --show-version
          USERNAME: ${{github.actor}}
          PASSWORD: ${{github.token}}
        run: |
          NEXT_VERSION=$(standard-version --dry-run | grep "tagging release" | cut -d " " -f 4 | sed "s/v//")
          echo "::set-output name=RELEASE_VERSION::v$NEXT_VERSION"
          standard-version --skip.commit=true --skip.tag=true
          git add CHANGELOG.md
          git commit -m "chore(release): generate changelog for v$NEXT_VERSION"
          mvn $MAVEN_ARGS clean release:clean release:prepare -DpushChanges=false -DautoVersionSubmodules=true -DreleaseVersion="$NEXT_VERSION" -DscmCommentPrefix="chore(release): " -Darguments="-Dmaven.test.skip=true"
          git push --follow-tags origin master

  rebase-develop-onto-master:
    name: Rebase develop onto master
    runs-on: ubuntu-latest
    needs:
      - release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: master
          # Use a personal access token in order to be able to perform action on protected branches
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name ${{ secrets.CI_GITHUB_USER }}
          git config user.email ${{ secrets.CI_GITHUB_EMAIL }}

      - name: Merge into develop
        run: |
          git fetch origin
          git checkout develop && git pull origin develop
          git rebase master
          git push origin develop

  github-release:
    name: GitHub release
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.release.outputs.releaseVersion }}

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          name: Release ${{ needs.release.outputs.releaseVersion }}
          tag_name: ${{ needs.release.outputs.releaseVersion }}
          files: |
            README.md
            CHANGELOG.md
